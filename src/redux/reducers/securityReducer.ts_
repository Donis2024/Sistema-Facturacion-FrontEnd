import { createSlice, PayloadAction } from "@reduxjs/toolkit";
import { ApiFetchResponse } from "./interfaces";

// AppUserRole
export interface AppUserRole {
  id: React.Key;
  role: string;
  description: string;
  updateDate: string;
  createDate: string;
  version: number;
  updateBy: string;
}

export interface UserRoleState {
  loading: boolean;
  data: Array<AppUserRole>;
  error: string | null;
  pagination: {
    page: number;
    totalPages: number | null;
    pageSize: number;
    totalItems: number;
  };
}

export const UserRoleSlice = createSlice({
  name: "data",
  initialState: {
    loading: false,
    data: [],
    error: null,
    pagination: {
      page: 1,
      pageSize: 99999,
      totalPages: null,
      totalItems: 0,
    },
  },
  reducers: {
    fetchUserRoleRequest: (
      state: UserRoleState,
      action: PayloadAction<{ page: number; pageSize: number }>
    ) => {
      state.loading = true;
      state.pagination.pageSize = action.payload.pageSize;
    },
    fetchUserRoleSuccess: (
      state: UserRoleState,
      action: PayloadAction<ApiFetchResponse<AppUserRole>>
    ) => {
      state.loading = false;
      state.data = action.payload.content.items;
      state.pagination.page = action.payload.content.page;
      state.pagination.totalPages = action.payload.content.totalPages;
      state.pagination.totalItems = action.payload.content.totalElements;
    },
    fetchUserRoleFailure: (state: UserRoleState, action) => {
      state.loading = false;
      state.error = action.payload;
    },
    createUserRoleRequest: (
      state: UserRoleState,
      action: PayloadAction<Omit<AppUserRole, "id">>
    ) => {
      state.loading = true;
    },
    createUserRoleSuccess: (
      state: UserRoleState,
      action: PayloadAction<AppUserRole>
    ) => {
      state.loading = false;
      state.data.push(action.payload);
    },
    createUserRoleFailure: (
      state: UserRoleState,
      action: PayloadAction<string>
    ) => {
      state.loading = false;
      state.error = action.payload;
    },
    updateUserRoleRequest: (
      state: UserRoleState,
      action: PayloadAction<AppUserRole>
    ) => {
      state.loading = true;
    },
    updateUserRoleSuccess: (
      state: UserRoleState,
      action: PayloadAction<AppUserRole>
    ) => {
      state.loading = false;
      state.data = state.data.map((item) =>
        item.id === action.payload.id ? action.payload : item
      );
    },
    updateUserRoleFailure: (
      state: UserRoleState,
      action: PayloadAction<string>
    ) => {
      state.loading = false;
      state.error = action.payload;
    },
    deleteUserRoleRequest: (
      state: UserRoleState,
      action: PayloadAction<string>
    ) => {
      state.loading = true;
    },
    deleteUserRoleSuccess: (
      state: UserRoleState,
      action: PayloadAction<string>
    ) => {
      state.loading = false;
      state.data = state.data.filter((item) => item.uuid !== action.payload);
    },
    deleteUserRoleFailure: (
      state: UserRoleState,
      action: PayloadAction<string>
    ) => {
      state.loading = false;
      state.error = action.payload;
    },
  },
});

export const {
  fetchUserRoleRequest,
  fetchUserRoleSuccess,
  fetchUserRoleFailure,
  createUserRoleRequest,
  createUserRoleSuccess,
  createUserRoleFailure,
  updateUserRoleRequest,
  updateUserRoleSuccess,
  updateUserRoleFailure,
  deleteUserRoleRequest,
  deleteUserRoleSuccess,
  deleteUserRoleFailure,
} = UserRoleSlice.actions;
